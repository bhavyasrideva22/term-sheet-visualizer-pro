
import { jsPDF } from "jspdf";
import { TermSheetResults } from "./calculationLogic";
import autoTable from 'jspdf-autotable';

export interface PdfGenerationData {
  results: TermSheetResults;
  inputs: {
    companyName: string;
    investorName: string;
    preMoneyValuation: number;
    investmentAmount: number;
    esopPool: number;
    liquidationPreference: number;
    participationCap: number;
  };
  date: string;
}

export const generateTermSheetPdf = (data: PdfGenerationData): Blob => {
  const { results, inputs, date } = data;
  
  // Initialize the PDF document
  const doc = new jsPDF();
  
  // Add logo and header
  doc.setFillColor(36, 94, 79); // Primary color
  doc.rect(0, 0, 210, 25, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.text("Term Sheet Simulation Results", 105, 15, { align: "center" });
  
  // Add date and company details
  doc.setTextColor(51, 51, 51);
  doc.setFontSize(10);
  doc.text(`Date: ${date}`, 20, 35);
  doc.text(`Company: ${inputs.companyName}`, 20, 40);
  doc.text(`Investor: ${inputs.investorName}`, 20, 45);
  
  // Summary box
  doc.setFillColor(248, 248, 248); // Cream background
  doc.setDrawColor(122, 201, 167); // Secondary color
  doc.roundedRect(20, 55, 170, 45, 3, 3, 'FD');
  
  doc.setFontSize(14);
  doc.setTextColor(36, 94, 79); // Primary color
  doc.text("Investment Summary", 105, 65, { align: "center" });
  
  doc.setFontSize(11);
  doc.setTextColor(51, 51, 51);
  
  // Format currency values
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 0,
    }).format(value);
  };
  
  // Add key metrics
  doc.text(`Pre-Money Valuation: ${formatCurrency(inputs.preMoneyValuation)}`, 30, 75);
  doc.text(`Investment Amount: ${formatCurrency(inputs.investmentAmount)}`, 30, 82);
  doc.text(`Post-Money Valuation: ${formatCurrency(results.postMoneyValuation)}`, 30, 89);
  
  doc.text(`Investor Equity: ${results.investorEquityPercentage.toFixed(2)}%`, 120, 75);
  doc.text(`Founders Equity: ${results.foundersEquityPercentage.toFixed(2)}%`, 120, 82);
  doc.text(`ESOP Pool: ${results.esopEquityPercentage.toFixed(2)}%`, 120, 89);
  
  // Equity table
  doc.setFontSize(14);
  doc.setTextColor(36, 94, 79);
  doc.text("Equity Distribution", 105, 115, { align: "center" });
  
  const tableData = [
    ['Shareholder', 'Shares', 'Percentage'],
    ['Founders', results.totalShares * (results.foundersEquityPercentage/100), `${results.foundersEquityPercentage.toFixed(2)}%`],
    ['Investors', results.investorShares, `${results.investorEquityPercentage.toFixed(2)}%`],
    ['ESOP Pool', results.totalShares * (results.esopEquityPercentage/100), `${results.esopEquityPercentage.toFixed(2)}%`],
    ['Total', results.totalShares, '100.00%']
  ];
  
  // @ts-ignore - autoTable is added as a plugin
  autoTable(doc, {
    startY: 120,
    head: [tableData[0]],
    body: tableData.slice(1),
    theme: 'grid',
    headStyles: { 
      fillColor: [36, 94, 79],
      textColor: [255, 255, 255]
    },
    alternateRowStyles: {
      fillColor: [248, 248, 248]
    },
    styles: {
      fontSize: 10
    }
  });
  
  // Additional term details
  doc.setFontSize(14);
  doc.setTextColor(36, 94, 79);
  doc.text("Key Investment Terms", 105, 180, { align: "center" });
  
  const termsData = [
    ['Term', 'Details'],
    ['Liquidation Preference', `${inputs.liquidationPreference}x`],
    ['Participation Cap', inputs.participationCap > 0 ? `${inputs.participationCap}x` : 'None'],
    ['Price Per Share', formatCurrency(results.pricePerShare)],
    ['Effective Pre-Money Valuation', formatCurrency(results.effectivePreMoneyValuation)]
  ];
  
  // @ts-ignore - autoTable is added as a plugin
  autoTable(doc, {
    startY: 185,
    head: [termsData[0]],
    body: termsData.slice(1),
    theme: 'grid',
    headStyles: { 
      fillColor: [36, 94, 79],
      textColor: [255, 255, 255]
    },
    alternateRowStyles: {
      fillColor: [248, 248, 248]
    },
    styles: {
      fontSize: 10
    }
  });
  
  // Footer
  const pageCount = doc.getNumberOfPages();
  doc.setFontSize(8);
  doc.setTextColor(150, 150, 150);
  
  for(let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.text('Generated by Term Sheet Simulator Pro - For educational purposes only', 105, 290, { align: 'center' });
    doc.text(`Page ${i} of ${pageCount}`, 105, 295, { align: 'center' });
  }
  
  return doc.output('blob');
};

export default generateTermSheetPdf;
